generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Role          @default(PLAYER)
  hasJoinedBot  Boolean       @default(false)     @map("has_joined_bot")
  accounts      Account[]
  sessions      Session[]
  stats         Stats?
  matchPlayers  MatchPlayer[]
  createdMatches Match[]      @relation("MatchCreator")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Stats {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  rating        Int      @default(1000)
  gamesPlayed   Int      @default(0) @map("games_played")
  wins          Int      @default(0)
  losses        Int      @default(0)
  draws         Int      @default(0)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stats")
}

model Match {
  id            String        @id @default(cuid())
  mode          GameMode
  gameFile      String?      @map("game_file")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  creatorId     String       @map("creator_id")
  creator       User         @relation("MatchCreator", fields: [creatorId], references: [id])
  players       MatchPlayer[]
  status        MatchStatus  @default(COMPLETED)

  @@map("matches")
}

model MatchPlayer {
  id        String   @id @default(cuid())
  matchId   String   @map("match_id")
  userId    String   @map("user_id")
  team      Int
  position  Int
  damage    Int      @default(0)
  money     Int      @default(0)
  wipeouts  Int      @default(0)
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([matchId, userId])
  @@map("match_players")
}

enum Role {
  ADMIN
  MODERATOR
  PLAYER
}

enum GameMode {
  TWO_VS_TWO
  THREE_VS_THREE
  TWO_VS_TWO_VS_TWO
}

enum MatchStatus {
  PENDING
  COMPLETED
  CANCELLED
} 