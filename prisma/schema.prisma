generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String        @id
  name           String?
  email          String?       @unique
  emailVerified  DateTime?     @map("email_verified")
  image          String?
  role           Role          @default(PLAYER)
  hasJoinedBot   Boolean       @default(false) @map("has_joined_bot")
  accounts       Account[]
  sessions       Session[]
  stats          Stats?
  matchPlayers   MatchPlayer[]
  createdMatches Match[]       @relation("MatchCreator")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Stats {
  id              String   @id @default(cuid())
  userId          String   @unique @map("user_id")
  rating          Int      @default(1200)
  maxRating       Int      @default(1200) @map("max_rating")
  minRating       Int      @default(1200) @map("min_rating")
  totalScore      Int      @default(0) @map("total_score")
  gamesPlayed     Int      @default(0) @map("games_played")
  wins            Int      @default(0)
  losses          Int      @default(0)
  draws           Int      @default(0)
  totalDivisions  Int      @default(0) @map("total_divisions")
  winsDivisions   Int      @default(0) @map("wins_divisions")
  lossesDivisions Int      @default(0) @map("losses_divisions")
  drawsDivisions  Int      @default(0) @map("draws_divisions")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stats")
}

model Match {
  id         String        @id @default(cuid())
  mode       GameMode
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  creatorId  String        @map("creator_id")
  creator    User          @relation("MatchCreator", fields: [creatorId], references: [id])
  players    MatchPlayer[]
  isRated    Boolean       @default(false) @map("is_rated")
  totalScore String        @default("0 - 0") @map("total_score")

  @@map("matches")
}

model MatchPlayer {
  id                  String      @id @default(cuid())
  matchId             String      @map("match_id")
  userId              String      @map("user_id")
  team                Int
  position            Int
  /// Тип: DamageDealt из src/types/json-types.ts
  /// Record<string, { isAlly: boolean, damage: number }>
  damageDealt         Json        @default("{}") @map("damage_dealt")
  totalDamageDealt    Int         @default(0) @map("total_damage_dealt")
  /// Тип: DamageReceived из src/types/json-types.ts
  /// Record<string, { isAlly: boolean, damage: number }>
  damageReceived      Json        @default("{}") @map("damage_received")
  totalDamageReceived Int         @default(0) @map("total_damage_received")
  score               Int         @default(0)
  minesDamage         Int         @default(0) @map("mines_damage")
  moneyTaken          Int         @default(0) @map("money_taken")
  armorTaken          Int         @default(0) @map("armor_taken")
  wipeouts            Int         @default(0)
  hasLeft             Boolean     @default(false) @map("has_left")
  result              MatchResult @default(LOSS) @map("result")
  /// Тип: Divisions из src/types/json-types.ts
  /// Record<string, { scores: number, result: 'WIN' | 'LOSS' | 'DRAW' }>
  divisions           Json        @default("{}") @map("divisions")
  ratingChange        Int         @default(0) @map("rating_change")
  match               Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  @@unique([matchId, userId])
  @@map("match_players")
}

enum Role {
  ADMIN
  MODERATOR
  PLAYER
}

enum GameMode {
  TWO_VS_TWO
  THREE_VS_THREE
  TWO_VS_TWO_VS_TWO
}

enum MatchResult {
  WIN
  LOSS
  DRAW
}
