import { prisma } from '@/lib/prisma';
import { UsersService } from '@/server/services/users/users.service';
import { Message } from 'discord.js';
import { MESSAGES } from '../constants/messages';
import { Command } from '../types/command';
import { createEmbed } from '../utils/embeds';

const usersService = new UsersService(prisma);

export const statCommand: Command = {
  name: 'stat',
  description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∏–≥—Ä–æ–∫–∞',
  execute: async (message: Message) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const content = message.content.trim();
      let discordId = message.author.id;

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (content.length > 5) {
        // !stat + –ø—Ä–æ–±–µ–ª + ID
        const mentionedId = content.slice(6).trim();
        if (mentionedId) {
          discordId = mentionedId;
        }
      }

      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const user = await usersService.getUserById(discordId);
        if (!user?.stats) {
          await message.reply({
            embeds: [
              createEmbed.info(
                '–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫'} –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`
              ),
            ],
          });
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        const allUsers = await usersService.getUsers();

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        const sortedUsers = allUsers
          .filter((u) => u.stats)
          .sort((a, b) => (b.stats?.rating || 0) - (a.stats?.rating || 0));

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        const userRank = sortedUsers.findIndex((u) => u.id === user.id) + 1;
        const rankSuffix =
          userRank === 1 ? 'st' : userRank === 2 ? 'nd' : userRank === 3 ? 'rd' : 'th';

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–∑–∞–≥–ª—É—à–∫–∞)
        const prevRating = user.stats.rating - Math.floor(Math.random() * 300);
        const newRating = user.stats.rating;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const totalGames = user.stats.wins + user.stats.losses + user.stats.draws;
        const winRate = Math.round((user.stats.wins / (totalGames || 1)) * 100);

        // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∏–∑–∏–æ–Ω–∞—Ö –∏ –æ—á–∫–∞—Ö
        const divTotal = 2178;
        const divWon = 1090;
        const divLost = 968;
        const divDraw = 120;
        const totalScores = 3216738;

        const embed = createEmbed.stats(user).addFields(
          {
            name: 'üëë –†–∞–Ω–≥',
            value: `–ú–µ—Å—Ç–æ: ${userRank}${rankSuffix}\n–†–µ–π—Ç–∏–Ω–≥: ${newRating}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${prevRating} ‚Üí ${newRating}`,
            inline: false,
          },
          {
            name: 'üéÆ –ò–≥—Ä—ã',
            value: `–í—Å–µ–≥–æ –∏–≥—Ä: ${totalGames}\n–ü–æ–±–µ–¥: ${user.stats.wins}\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${user.stats.losses}\n–ù–∏—á—å–∏—Ö: ${user.stats.draws}\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${winRate}%`,
            inline: false,
          },
          {
            name: 'üèÜ –î–∏–≤–∏–∑–∏–æ–Ω—ã',
            value: `–í—Å–µ–≥–æ: ${divTotal}\n–ü–æ–±–µ–¥: ${divWon}\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${divLost}\n–ù–∏—á—å–∏—Ö: ${divDraw}`,
            inline: false,
          },
          {
            name: 'üìä –û—á–∫–∏',
            value: `–í—Å–µ–≥–æ –æ—á–∫–æ–≤: ${totalScores}`,
            inline: false,
          }
        );

        await message.reply({ embeds: [embed] });
      } catch {
        await message.reply({
          embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.USER_NOT_FOUND)],
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !stat:', error);
      await message.reply({
        embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.GENERAL)],
      });
    }
  },
};
