import type { AppRouter } from "@/server/root";
import type { Stats, User } from '@prisma/client';
import { createTRPCProxyClient, httpBatchLink } from '@trpc/client';
import { createHmac } from 'crypto';
import {
  Client,
  ColorResolvable,
  EmbedBuilder,
  Events,
  GatewayIntentBits,
  Message,
} from 'discord.js';
import * as dotenv from 'dotenv';
import superjson from 'superjson';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const BOT_SECRET_KEY = process.env.BOT_SECRET_KEY;
const APP_URL =
  process.env.NODE_ENV === 'production' ? (process.env.APP_URL ?? '') : 'http://localhost:3000';
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç tRPC
const trpc = createTRPCProxyClient<AppRouter>({
  links: [
    httpBatchLink({
      url: `${APP_URL}/api/trpc`,
    }),
  ],
  transformer: superjson,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createSignature(timestamp: string, body: string = ''): string {
  const hmac = createHmac('sha256', BOT_SECRET_KEY || '');
  return hmac.update(`${timestamp}.${body}`).digest('hex');
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Discord —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–º–æ–¥–∑–∏
const EMOJIS = {
  SUCCESS: '‚úÖ',
  ERROR: '‚ùå',
  INFO: '‚ÑπÔ∏è',
  WARNING: '‚ö†Ô∏è',
  LINK: 'üåê',
  CROWN: 'üëë',
  STAR: '‚≠ê',
  MEDAL: 'üèÖ',
  TROPHY: 'üèÜ',
  CHART: 'üìä',
  GAME: 'üéÆ',
  TIME: '‚è∞',
} as const;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
const MESSAGES = {
  ERROR: {
    COMMAND_FAILED: (command: string) =>
      `${EMOJIS.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã \`${command}\`\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
    USER_NOT_FOUND: `${EMOJIS.ERROR} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`,
    GENERAL: `${EMOJIS.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
  },
  SUCCESS: {
    ALREADY_JOINED: (appUrl: string) =>
      `${EMOJIS.INFO} –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –±–æ—Ç—É!\n` +
      `${EMOJIS.LINK} –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${appUrl}`,
    JOIN_BOT: (appUrl: string) =>
      `${EMOJIS.SUCCESS} –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!\n` +
      `${EMOJIS.LINK} –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${appUrl}`,
    USER_UPDATED: (username: string) =>
      `${EMOJIS.SUCCESS} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`,
  },
  HELP: {
    HEADER: `${EMOJIS.INFO} **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n`,
    COMMAND: (name: string, description: string) => `${EMOJIS.GAME} \`!${name}\` - ${description}`,
  },
  STATS: {
    NO_STATS: (username: string) => `${EMOJIS.INFO} –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`,
    HEADER: (username: string) => `${EMOJIS.TROPHY} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${username}**\n\n`,
  },
} as const;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤
const COLORS = {
  PRIMARY: '#5865F2' as ColorResolvable,
  SUCCESS: '#57F287' as ColorResolvable,
  ERROR: '#ED4245' as ColorResolvable,
  WARNING: '#FEE75C' as ColorResolvable,
  INFO: '#5865F2' as ColorResolvable,
} as const;

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embed —Å–æ–æ–±—â–µ–Ω–∏–π
const createEmbed = {
  success: (title: string, description?: string) => {
    return new EmbedBuilder()
      .setColor(COLORS.SUCCESS)
      .setTitle(`${EMOJIS.SUCCESS} ${title}`)
      .setDescription(description || '')
      .setTimestamp();
  },
  error: (title: string, description?: string) => {
    return new EmbedBuilder()
      .setColor(COLORS.ERROR)
      .setTitle(`${EMOJIS.ERROR} ${title}`)
      .setDescription(description || '')
      .setTimestamp();
  },
  info: (title: string, description?: string) => {
    return new EmbedBuilder()
      .setColor(COLORS.INFO)
      .setTitle(`${EMOJIS.INFO} ${title}`)
      .setDescription(description || '')
      .setTimestamp();
  },
  warning: (title: string, description?: string) => {
    return new EmbedBuilder()
      .setColor(COLORS.WARNING)
      .setTitle(`${EMOJIS.WARNING} ${title}`)
      .setDescription(description || '')
      .setTimestamp();
  },
  stats: (user: User & { stats: Stats | null }) => {
    const embed = new EmbedBuilder()
      .setColor(COLORS.PRIMARY)
      .setTitle(`${EMOJIS.TROPHY} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${user.name}`)
      .setThumbnail(user.image || null)
      .setTimestamp();
    return embed;
  },
  top: () => {
    return new EmbedBuilder()
      .setColor(COLORS.PRIMARY)
      .setTitle(`${EMOJIS.TROPHY} –¢–û–ü-10 –ò–ì–†–û–ö–û–í`)
      .setTimestamp();
  },
  help: () => {
    return new EmbedBuilder()
      .setColor(COLORS.INFO)
      .setTitle(`${EMOJIS.INFO} –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥`)
      .setTimestamp();
  },
} as const;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–∞–Ω–¥
interface Command {
  name: string;
  description: string;
  execute: (message: Message) => Promise<void>;
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏
class CommandHandler {
  private commands: Map<string, Command> = new Map();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async checkAndUpdateUserData(message: Message): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentAvatar = message.author.avatar
        ? `https://cdn.discordapp.com/avatars/${message.author.id}/${message.author.avatar}.png`
        : 'https://discord.com/assets/1f0bfc0865d324c2587920a7d80c609b.png';

      const currentUsername = message.author.globalName || message.author.username;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
      const userData = await trpc.users.byId.query(message.author.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (userData && (userData.image !== currentAvatar || userData.name !== currentUsername)) {
        const updateData = {
          userId: message.author.id,
          username: currentUsername,
          avatar: currentAvatar,
        };

        const updateTimestamp = Date.now().toString();
        const updateSignature = createSignature(updateTimestamp, JSON.stringify(updateData));

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await trpc.auth.updateUserData.mutate({
          ...updateData,
          timestamp: updateTimestamp,
          signature: updateSignature,
        });

        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUsername}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        error: error,
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
      });
    }
  }

  register(command: Command) {
    this.commands.set(command.name.toLowerCase(), command);
  }

  async handleMessage(message: Message) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if (message.author.bot) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if (!message.content.startsWith('!')) return;

    await this.checkAndUpdateUserData(message);

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    const args = message.content.slice(1).trim().split(/ +/);
    const rawCommandName = args.shift();

    if (!rawCommandName) return;

    const commandName = rawCommandName.toLowerCase();

    // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É
    const command = this.commands.get(commandName);
    if (!command) return;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try {
      await command.execute(message);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${commandName}:`, {
        error: error,
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
      });
      await message.reply(MESSAGES.ERROR.COMMAND_FAILED(commandName));
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
  getCommands(): Command[] {
    return Array.from(this.commands.values());
  }
}

// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
const commandHandler = new CommandHandler();

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É !join
commandHandler.register({
  name: 'join',
  description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É',
  execute: async (message) => {
    const timestamp = Date.now().toString();

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const statusCheck = await trpc.auth.checkBotStatus.query({
      userId: message.author.id,
      timestamp,
      signature: createSignature(timestamp),
    });

    if (statusCheck.hasJoinedBot) {
      await message.reply({
        embeds: [
          createEmbed.info(
            '–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!',
            `${EMOJIS.LINK} –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${APP_URL}`
          ),
        ],
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const avatar = message.author.avatar
      ? `https://cdn.discordapp.com/avatars/${message.author.id}/${message.author.avatar}.png`
      : 'https://discord.com/assets/1f0bfc0865d324c2587920a7d80c609b.png';

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const username = message.author.globalName || message.author.username;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const joinData = {
      userId: message.author.id,
      username,
      avatar,
    };

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const joinTimestamp = Date.now().toString();
    const joinSignature = createSignature(joinTimestamp, JSON.stringify(joinData));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await trpc.auth.joinBot.mutate({
      ...joinData,
      timestamp: joinTimestamp,
      signature: joinSignature,
    });

    await message.reply({
      embeds: [
        createEmbed.success(
          '–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!',
          `${EMOJIS.LINK} –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${APP_URL}`
        ),
      ],
    });
  },
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É !help
commandHandler.register({
  name: 'help',
  description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
  execute: async (message) => {
    const commands = commandHandler.getCommands();
    const embed = createEmbed.help();

    const commandsList = commands
      .map((cmd) => `${EMOJIS.GAME} !${cmd.name} - ${cmd.description}`)
      .join('\n');

    embed.setDescription(commandsList);

    await message.reply({ embeds: [embed] });
  },
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É !stat
commandHandler.register({
  name: 'stat',
  description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∏–≥—Ä–æ–∫–∞',
  execute: async (message) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const content = message.content.trim();
      let discordId = message.author.id;

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (content.length > 5) {
        // !stat + –ø—Ä–æ–±–µ–ª + ID
        const mentionedId = content.slice(6).trim();
        if (mentionedId) {
          discordId = mentionedId;
        }
      }

      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const user = await trpc.users.byId.query(discordId);
        if (!user.stats) {
          await message.reply({
            embeds: [
              createEmbed.info(
                '–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫'} –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`
              ),
            ],
          });
          return;
        }
        console.log(user);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        const allUsers = await trpc.users.list.query();

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        const sortedUsers = allUsers
          .filter((u) => u.stats)
          .sort((a, b) => (b.stats?.rating || 0) - (a.stats?.rating || 0));

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        const userRank = sortedUsers.findIndex((u) => u.id === user.id) + 1;
        const rankSuffix =
          userRank === 1 ? 'st' : userRank === 2 ? 'nd' : userRank === 3 ? 'rd' : 'th';

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–∑–∞–≥–ª—É—à–∫–∞)
        const prevRating = user.stats.rating - Math.floor(Math.random() * 300);
        const newRating = user.stats.rating;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        const totalGames = user.stats.wins + user.stats.losses + user.stats.draws;
        const winRate = Math.round((user.stats.wins / (totalGames || 1)) * 100);

        // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∏–∑–∏–æ–Ω–∞—Ö –∏ –æ—á–∫–∞—Ö
        const divTotal = 2178;
        const divWon = 1090;
        const divLost = 968;
        const divDraw = 120;
        const totalScores = 3216738;

        const embed = createEmbed.stats(user).addFields(
          {
            name: 'üëë –†–∞–Ω–≥',
            value: `–ú–µ—Å—Ç–æ: ${userRank}${rankSuffix}\n–†–µ–π—Ç–∏–Ω–≥: ${newRating}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${prevRating} ‚Üí ${newRating}`,
            inline: false,
          },
          {
            name: 'üéÆ –ò–≥—Ä—ã',
            value: `–í—Å–µ–≥–æ –∏–≥—Ä: ${totalGames}\n–ü–æ–±–µ–¥: ${user.stats.wins}\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${user.stats.losses}\n–ù–∏—á—å–∏—Ö: ${user.stats.draws}\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${winRate}%`,
            inline: false,
          },
          {
            name: 'üèÜ –î–∏–≤–∏–∑–∏–æ–Ω—ã',
            value: `–í—Å–µ–≥–æ: ${divTotal}\n–ü–æ–±–µ–¥: ${divWon}\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${divLost}\n–ù–∏—á—å–∏—Ö: ${divDraw}`,
            inline: false,
          },
          {
            name: 'üìä –û—á–∫–∏',
            value: `–í—Å–µ–≥–æ –æ—á–∫–æ–≤: ${totalScores}`,
            inline: false,
          }
        );

        await message.reply({ embeds: [embed] });
      } catch {
        await message.reply(MESSAGES.ERROR.USER_NOT_FOUND);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !stat:', error);
      await message.reply({
        embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.GENERAL)],
      });
    }
  },
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É !top
commandHandler.register({
  name: 'top',
  description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 10 —á–µ–ª–æ–≤–µ–∫ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ',
  execute: async (message) => {
    try {
      const { users: topPlayers } = await trpc.users.getTop.query('start');

      if (!topPlayers || topPlayers.length === 0) {
        await message.reply({
          embeds: [createEmbed.info('–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤', '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.')],
        });
        return;
      }

      const embed = createEmbed.top();

      const fields = topPlayers.map((player, index) => {
        const emoji = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'][index];
        const rating = player.stats?.rating || 0;
        const minRating = player.stats?.minRating || 0;
        const maxRating = player.stats?.maxRating || 0;
        const wins = player.stats?.wins || 0;
        const losses = player.stats?.losses || 0;
        const draws = player.stats?.draws || 0;
        const gamesPlayed = wins + losses + draws;
        const divs = player.stats?.totalDivisions || 0;
        const score = player.stats?.totalScore || 0;
        const winRate = gamesPlayed > 0 ? Math.round((wins / gamesPlayed) * 100) : 0;

        return {
          name: `${emoji} ${player.name}`,
          value: `‚Ä¢ Rating: ${rating} (${maxRating}‚Üí${minRating})
‚Ä¢ Games: ${gamesPlayed}, Divs: ${divs}, Winrate: ${winRate}%
‚Ä¢ Wins: ${wins}, Losses: ${losses}, Draws: ${draws}
‚Ä¢ Score: ${score}`,
          inline: false,
        };
      });

      embed.addFields(fields);
      await message.reply({ embeds: [embed] });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !top:', error);
      await message.reply({
        embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.GENERAL)],
      });
    }
  },
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É !bottom
commandHandler.register({
  name: 'bottom',
  description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–µ–ª–æ–≤–µ–∫ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ',
  execute: async (message) => {
    try {
      const { users: bottomPlayers, total } = await trpc.users.getTop.query('end');

      if (!bottomPlayers || bottomPlayers.length === 0) {
        await message.reply({
          embeds: [createEmbed.info('–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤', '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.')],
        });
        return;
      }

      const embed = new EmbedBuilder()
        .setColor(COLORS.PRIMARY)
        .setTitle(`${EMOJIS.TROPHY} –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä–æ–∫–æ–≤`)
        .setTimestamp();

      const fields = bottomPlayers.reverse().map((player, index) => {
        const position = total - bottomPlayers.length + index + 1;
        const rating = player.stats?.rating || 0;
        const minRating = player.stats?.minRating || 0;
        const maxRating = player.stats?.maxRating || 0;
        const wins = player.stats?.wins || 0;
        const losses = player.stats?.losses || 0;
        const draws = player.stats?.draws || 0;
        const gamesPlayed = wins + losses + draws;
        const divs = player.stats?.totalDivisions || 0;
        const score = player.stats?.totalScore || 0;
        const winRate = gamesPlayed > 0 ? Math.round((wins / gamesPlayed) * 100) : 0;

        return {
          name: `${position}. ${player.name}`,
          value: `‚Ä¢ Rating: ${rating} (${maxRating}‚Üí${minRating})
‚Ä¢ Games: ${gamesPlayed}, Divs: ${divs}, Winrate: ${winRate}%
‚Ä¢ Wins: ${wins}, Losses: ${losses}, Draws: ${draws}
‚Ä¢ Score: ${score}`,
          inline: false,
        };
      });

      embed.addFields(fields);
      await message.reply({ embeds: [embed] });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !bottom:', error);
      await message.reply({
        embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.GENERAL)],
      });
    }
  },
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É !rank
commandHandler.register({
  name: 'rank',
  description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ —Å–æ—Å–µ–¥–µ–π',
  execute: async (message) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const content = message.content.trim();
      let discordId = message.author.id;

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (content.length > 5) {
        // !rank + –ø—Ä–æ–±–µ–ª + ID
        const mentionedId = content.slice(6).trim();
        if (mentionedId) {
          discordId = mentionedId;
        }
      }

      try {
        const neighbors = await trpc.users.getUserWithNeighbors.query(discordId);

        if (neighbors.length === 0) {
          await message.reply({
            embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.USER_NOT_FOUND)],
          });
          return;
        }

        const embed = new EmbedBuilder()
          .setColor(COLORS.PRIMARY)
          .setTitle(`${EMOJIS.TROPHY} –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –∏ —Å–æ—Å–µ–¥–∏`)
          .setTimestamp();

        const fields = neighbors.map((player, index) => {
          const rating = player.stats?.rating || 0;
          const minRating = player.stats?.minRating || 0;
          const maxRating = player.stats?.maxRating || 0;
          const wins = player.stats?.wins || 0;
          const losses = player.stats?.losses || 0;
          const draws = player.stats?.draws || 0;
          const gamesPlayed = wins + losses + draws;
          const divs = player.stats?.totalDivisions || 0;
          const score = player.stats?.totalScore || 0;
          const winRate = gamesPlayed > 0 ? Math.round((wins / gamesPlayed) * 100) : 0;
          const rank = index + 1;

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥–æ–≤—É—é –∏–∫–æ–Ω–∫—É
          let rankIcon = '';
          if (rank === 1) rankIcon = 'ü•á';
          else if (rank === 2) rankIcon = 'ü•à';
          else if (rank === 3) rankIcon = 'ü•â';
          else rankIcon = `${rank}`;

          // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
          const namePrefix = player.id === discordId ? '‚û°Ô∏è ' : '';

          return {
            name: `${namePrefix}${rankIcon} ${player.name}`,
            value: `‚Ä¢ Rating: ${rating} (${maxRating}‚Üí${minRating})
‚Ä¢ Games: ${gamesPlayed}, Divs: ${divs}, Winrate: ${winRate}%
‚Ä¢ Wins: ${wins}, Losses: ${losses}, Draws: ${draws}
‚Ä¢ Score: ${score}`,
            inline: false,
          };
        });

        embed.addFields(fields);
        await message.reply({ embeds: [embed] });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
        await message.reply({
          embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.GENERAL)],
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !rank:', error);
      await message.reply({
        embeds: [createEmbed.error('–û—à–∏–±–∫–∞', MESSAGES.ERROR.GENERAL)],
      });
    }
  },
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on(Events.MessageCreate, async (message) => {
  await commandHandler.handleMessage(message);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client.on(Events.Error, (error) => {
  console.error('Discord client error:', error);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
client.once(Events.ClientReady, (c) => {
  console.log(`–ë–æ—Ç –≥–æ—Ç–æ–≤! –í–æ—à–µ–ª –∫–∞–∫ ${c.user.tag}`);
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Discord
client.login(DISCORD_BOT_TOKEN);
