import type { AppRouter } from "@/server/root";
import { createTRPCProxyClient, httpBatchLink } from "@trpc/client";
import { createHmac } from "crypto";
import { Client, Events, GatewayIntentBits } from "discord.js";
import * as dotenv from "dotenv";
import superjson from "superjson";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç tRPC
const trpc = createTRPCProxyClient<AppRouter>({
  links: [
    httpBatchLink({
      url: `${process.env.NEXTAUTH_URL}/api/trpc`,
    }),
  ],
  transformer: superjson,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createSignature(timestamp: string, body: string = ""): string {
  const hmac = createHmac("sha256", process.env.BOT_SECRET_KEY || "");
  return hmac.update(`${timestamp}.${body}`).digest("hex");
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Discord —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
client.once(Events.ClientReady, (c) => {
  console.log(`–ë–æ—Ç –≥–æ—Ç–æ–≤! –í–æ—à–µ–ª –∫–∞–∫ ${c.user.tag}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on(Events.MessageCreate, async (message) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
  if (message.author.bot) return;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É !join
  if (message.content.toLowerCase() === "!join") {
    try {
      const timestamp = Date.now().toString();

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const statusCheck = await trpc.auth.checkBotStatus.query({
        userId: message.author.id,
        timestamp,
        signature: createSignature(timestamp),
      });

      if (statusCheck.hasJoinedBot) {
        await message.reply(
          "‚ÑπÔ∏è –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –±–æ—Ç—É! –ú–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n" +
            `üåê ${process.env.NEXTAUTH_URL}`
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const avatar = message.author.avatar
        ? `https://cdn.discordapp.com/avatars/${message.author.id}/${message.author.avatar}.png`
        : "https://discord.com/assets/1f0bfc0865d324c2587920a7d80c609b.png";

      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const username = message.author.globalName || message.author.username;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const joinData = {
        userId: message.author.id,
        username,
        avatar,
      };

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const joinTimestamp = Date.now().toString();
      const joinSignature = createSignature(
        joinTimestamp,
        JSON.stringify(joinData)
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const user = await trpc.auth.joinBot.mutate({
        ...joinData,
        timestamp: joinTimestamp,
        signature: joinSignature,
      });

      console.log("Join successful. User data:", user);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let replyMessage = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! ";
      if (user.role === "ADMIN") {
        replyMessage += "**–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.** ";
      }
      replyMessage += `\nüåê –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${process.env.NEXTAUTH_URL}`;

      await message.reply(replyMessage);
    } catch (error) {
      console.error("Detailed error in !join command:", {
        error: error,
        message: error instanceof Error ? error.message : "Unknown error",
        stack: error instanceof Error ? error.stack : undefined,
      });
      await message.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client.on(Events.Error, (error) => {
  console.error("Discord client error:", error);
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Discord
client.login(process.env.DISCORD_BOT_TOKEN);
