import { MatchService } from '@/server/services/match/match.service';
import { Match, MatchPlayer, PrismaClient, Stats, User } from '@prisma/client';
import { Client, EmbedBuilder, TextChannel } from 'discord.js';
import { COLORS } from '../constants/colors';
import { EMOJIS } from '../constants/emojis';

// –¢–∏–ø –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ —Å –∏–≥—Ä–æ–∫–∞–º–∏
type MatchWithPlayers = Match & {
  players: (MatchPlayer & {
    user: User & {
      stats: Stats | null;
    };
  })[];
};

export class MatchNotificationService {
  private lastMatchId: string | null = null;
  private readonly prisma: PrismaClient;
  private readonly discordClient: Client;

  constructor(prisma: PrismaClient, discordClient: Client) {
    this.prisma = prisma;
    this.discordClient = discordClient;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async initialize(): Promise<void> {
    try {
      const lastMatch = await this.prisma.match.findFirst({
        orderBy: { createdAt: 'desc' },
        select: { id: true },
      });

      if (lastMatch) {
        this.lastMatchId = lastMatch.id;
        console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞: ${this.lastMatchId}`);
      } else {
        console.log('–ú–∞—Ç—á–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
   * @param intervalMs –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  startChecker(intervalMs: number = 10000): void {
    setInterval(async () => {
      await this.checkForNewMatches();
    }, intervalMs);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
   */
  async checkForNewMatches(): Promise<void> {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π');
    try {
      const matchService = new MatchService(this.prisma);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á
      const lastMatch = await this.prisma.match.findFirst({
        orderBy: { createdAt: 'desc' },
        select: { id: true },
      });

      // –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (!lastMatch) {
        console.log('–ú–∞—Ç—á–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (this.lastMatchId === null) {
        console.log(`–ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞: ${lastMatch.id}`);
        this.lastMatchId = lastMatch.id;
        return;
      }

      // –ï—Å–ª–∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (this.lastMatchId === lastMatch.id) {
        console.log('–ù–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –Ω–µ—Ç');
        return;
      }

      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á
      console.log(`–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ç—á. –°—Ç–∞—Ä—ã–π ID: ${this.lastMatchId}, –Ω–æ–≤—ã–π ID: ${lastMatch.id}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ
      const newMatch = (await matchService.findById(lastMatch.id)) as MatchWithPlayers | null;

      if (!newMatch) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ');
        this.lastMatchId = lastMatch.id;
        return;
      }

      console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ç—á: ${newMatch.id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—á —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π
      if (!newMatch.isRated) {
        console.log('–ú–∞—Ç—á –Ω–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        this.lastMatchId = newMatch.id;
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendMatchNotification(newMatch);

      // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.lastMatchId = newMatch.id;
      console.log(`ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${this.lastMatchId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ
   * @param match –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
   */
  private async sendMatchNotification(match: MatchWithPlayers): Promise<void> {
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª "—Ä–µ–π—Ç–∏–Ω–≥" –≤–æ –≤—Å–µ—Ö –≥–∏–ª—å–¥–∏—è—Ö
    for (const guild of this.discordClient.guilds.cache.values()) {
      const ratingChannel = guild.channels.cache.find(
        (ch) => ch.name === '—Ä–µ–π—Ç–∏–Ω–≥' && ch.type === 0
      );

      if (ratingChannel) {
        // –†–∞–∑–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        const [team1, team2] = this.separatePlayersByTeam(match.players);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
        const [scoreTeam1, scoreTeam2] = match.totalScore.split(' - ').map(Number);
        const isTeam1Winner = scoreTeam1 > scoreTeam2;
        const isDraw = scoreTeam1 === scoreTeam2;

        // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã –æ—á–∫–æ–≤ –∑–∞ –º–∞—Ç—á –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        const team1TotalScore = team1.reduce((sum, player) => sum + player.score, 0);
        const team2TotalScore = team2.reduce((sum, player) => sum + player.score, 0);
        const scoreDifference = Math.abs(team1TotalScore - team2TotalScore);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        const team1Content = this.formatTeamStats(team1, isDraw ? null : isTeam1Winner);
        const team2Content = this.formatTeamStats(team2, isDraw ? null : !isTeam1Winner);

        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        const team1Embed = new EmbedBuilder()
          .setColor(isTeam1Winner ? COLORS.SUCCESS : isDraw ? COLORS.INFO : COLORS.ERROR)
          .setTitle(
            isDraw
              ? `${EMOJIS.INFO} –ö–æ–º–∞–Ω–¥–∞ 1 (–ù–∏—á—å—è)`
              : isTeam1Winner
                ? `${EMOJIS.TROPHY} –ö–æ–º–∞–Ω–¥–∞ 1 (–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏)`
                : `${EMOJIS.WARNING} –ö–æ–º–∞–Ω–¥–∞ 1 (–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ)`
          )
          .setDescription(team1Content);

        const team2Embed = new EmbedBuilder()
          .setColor(isTeam1Winner ? COLORS.ERROR : isDraw ? COLORS.INFO : COLORS.SUCCESS)
          .setTitle(
            isDraw
              ? `${EMOJIS.INFO} –ö–æ–º–∞–Ω–¥–∞ 2 (–ù–∏—á—å—è)`
              : isTeam1Winner
                ? `${EMOJIS.WARNING} –ö–æ–º–∞–Ω–¥–∞ 2 (–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ)`
                : `${EMOJIS.TROPHY} –ö–æ–º–∞–Ω–¥–∞ 2 (–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏)`
          )
          .setDescription(team2Content);

        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ (–≤–Ω–∏–∑—É)
        const resultEmbed = new EmbedBuilder()
          .setColor(COLORS.PRIMARY)
          .setTitle(`${EMOJIS.TROPHY} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ ${this.getGameModeName(match.mode)}`)
          .addFields([
            {
              name: `${EMOJIS.STAR} –°—á–µ—Ç –º–∞—Ç—á–∞`,
              value: match.totalScore,
            },
            {
              name: `${EMOJIS.CHART} –†–∞–∑–Ω–∏—Ü–∞ –≤ –æ—á–∫–∞—Ö`,
              value: scoreDifference.toString(),
            },
            {
              name: `${EMOJIS.LINK} –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á`,
              value: `[–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞](http://80.76.34.54:3000/matches/${match.id})`,
            },
          ])
          .setTimestamp();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–±–µ–¥–∞–º–∏
        await (ratingChannel as TextChannel).send({ embeds: [team1Embed, team2Embed] });
        await (ratingChannel as TextChannel).send({ embeds: [resultEmbed] });
        break;
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
   * @param team –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
   * @param isWinner –ü—Ä–∏–∑–Ω–∞–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (true - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, false - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π, null - –Ω–∏—á—å—è)
   * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
   */
  private formatTeamStats(
    team: (MatchPlayer & { user: User & { stats: Stats | null } })[],
    isWinner: boolean | null
  ): string {
    let content = '';

    // –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    const icon = isWinner === true ? EMOJIS.CROWN : isWinner === false ? '‚öîÔ∏è' : 'üîπ';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (const player of team) {
      if (player.userId.startsWith('bot_')) continue;

      const oldRating = player.user.stats ? player.user.stats.rating - player.ratingChange : 0;
      const newRating = player.user.stats ? player.user.stats.rating : 0;
      const ratingChangeIcon = player.ratingChange >= 0 ? 'üìà' : 'üìâ';

      content += `${icon} <@${player.userId}>\n`;
      content += `–†–µ–π—Ç–∏–Ω–≥: ${oldRating.toFixed(2)} ‚Üí ${newRating.toFixed(2)} ${ratingChangeIcon} (${player.ratingChange >= 0 ? '+' : ''}${player.ratingChange.toFixed(2)})\n`;
    }

    return content || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö';
  }

  /**
   * –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
   * @param players –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
   * @returns –ú–∞—Å—Å–∏–≤ —Å –¥–≤—É–º—è –∫–æ–º–∞–Ω–¥–∞–º–∏
   */
  private separatePlayersByTeam(
    players: (MatchPlayer & { user: User & { stats: Stats | null } })[]
  ): [
    (MatchPlayer & { user: User & { stats: Stats | null } })[],
    (MatchPlayer & { user: User & { stats: Stats | null } })[],
  ] {
    const team1 = players.filter((player) => player.team === 1);
    const team2 = players.filter((player) => player.team === 2);
    return [team1, team2];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
   * @param mode –†–µ–∂–∏–º –∏–≥—Ä—ã
   * @returns –≠–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º—É –∏–≥—Ä—ã
   */
  private getGameModeEmoji(mode: string): string {
    switch (mode) {
      case 'TWO_VS_TWO':
        return '2Ô∏è‚É£';
      case 'THREE_VS_THREE':
        return '3Ô∏è‚É£';
      case 'TWO_VS_TWO_VS_TWO':
        return '6Ô∏è‚É£';
      default:
        return EMOJIS.GAME;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
   * @param mode –†–µ–∂–∏–º –∏–≥—Ä—ã
   * @returns –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
   */
  private getGameModeName(mode: string): string {
    switch (mode) {
      case 'TWO_VS_TWO':
        return '2x2';
      case 'THREE_VS_THREE':
        return '3x3';
      case 'TWO_VS_TWO_VS_TWO':
        return '2x2x2';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º';
    }
  }
}
