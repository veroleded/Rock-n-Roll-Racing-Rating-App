version: "3.8"

services:
  nginx:
    image: nginx:alpine
    container_name: rnr_racing_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nextjs
    networks:
      - app_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: rnr_racing_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  nextjs:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - DATABASE_URL=${DATABASE_URL}
    container_name: rnr_racing_app
    env_file:
      - .env.prod
    restart: always
    expose:
      - "3000"
    depends_on:
      - postgres
    networks:
      - app_network

  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot.prod
    container_name: rnr_racing_bot
    env_file:
      - .env.prod
    restart: always
    depends_on:
      - postgres
    networks:
      - app_network

  postgres:
    image: postgres:16-alpine
    container_name: rnr_racing_db
    env_file:
      - .env.prod
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: 